(window.webpackJsonp=window.webpackJsonp||[]).push([[126],{527:function(e,t,r){"use strict";r.r(t);var a=r(40),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"handling-concurrent-http-requests"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#handling-concurrent-http-requests"}},[e._v("#")]),e._v(" Handling Concurrent HTTP Requests")]),e._v(" "),r("p",[e._v("So, our web application receives 1000 requests/second, how does it handle that as efficient as possible? Turns out there are some different ways to handle it, and Node.js started to use a new approach that turned out to be more scalable than the traditional approached used. At least to some extent, but let's take a closer look at it!")]),e._v(" "),r("iframe",{attrs:{width:"560",height:"314",src:"https://www.youtube.com/embed/mZxtkMhL5VA",frameborder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}}),e._v(" "),r("h2",{attrs:{id:"lecture-material"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#lecture-material"}},[e._v("#")]),e._v(" Lecture material")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"handling-concurrent-http-requests.pdf"}},[e._v("handling-concurrent-http-requests.pdf")])]),e._v(" "),r("li",[r("a",{attrs:{href:"handling-concurrent-http-requests.pptx"}},[e._v("handling-concurrent-http-requests.pptx")])])]),e._v(" "),r("h2",{attrs:{id:"recommended-reading"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#recommended-reading"}},[e._v("#")]),e._v(" Recommended reading")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://www.journaldev.com/7462/node-js-architecture-single-threaded-event-loop",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node JS Architecture â€“ Single Threaded Event Loop"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);